AWSTemplateFormatVersion: "2010-09-09"
Description: Kong Mesh zone ingress on ECS
Parameters:
  VPCStackName:
    Type: String
    Description:
      Name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  CPStackName:
    Type: String
    Description: Cloudformation stack used to provision the control plane.
  Image:
    Type: String
    Default: "docker.io/kong/kuma-dp:2.8.0"
    Description: Name of the zone ingress docker image
  AllowedCidr:
    Type: String
    Default: "10.0.0.0/8"
    Description: CIDR used to restrict zone ingress access
  DesiredCount:
    Type: Number
    Default: 1
    Description: Number of Zone Ingress tasks to run
  DataplaneSecretPrefix:
    Type: String
    Default: "kong-mesh-ecs"
    Description: Prefix to use for naming dataplane token secrets
Mappings:
  Config:
    ZoneIngress:
      Template: |
        ---
        type: ZoneIngress
        name: ecs-zone-ingress
        networking:
          address: "{{ address }}"
          port: 10001
          advertisedAddress: "{{ advertisedAddress }}"
          advertisedPort: 10001
      Name: ecs-zone-ingress
Resources:
  ZITokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret containing Kuma ZI Token
      Name: !Join ["/", [!Ref DataplaneSecretPrefix, !FindInMap [Config, ZoneIngress, Name]]]
      SecretString: "{}"

  # Our NLB exposes the zone ingresson port 10001
  LoadBalancerTargetZoneIngressTLS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port: 10001
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, VPCId]]

  LoadBalancerListenerZoneIngressTLS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, LoadBalancerZoneIngress]]
      Port: 10001
      Protocol: TCP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref LoadBalancerTargetZoneIngressTLS

  # IAM roles for the zone ingress task
  ZITaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: get-secrets
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref ZITokenSecret
                  - Fn::ImportValue: !Join [":", [!Ref CPStackName, CPCASecret]]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ZITaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Path: /
      Tags:
        - Key: kuma.io/type
          Value: ingress
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess

  ZISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: kuma-ingress security group
      SecurityGroupIngress:
        - CidrIp: "10.0.0.0/8"
          IpProtocol: tcp
          ToPort: 10001
          FromPort: 10001
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, VPCId]]

  # ECS configuration
  ZILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  ZIService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, ClusterName]]
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref ZITaskDefinition
      PropagateTags: SERVICE
      Tags:
        - Key: kuma.io/type
          Value: ingress
      LoadBalancers:
        - TargetGroupArn: !Ref LoadBalancerTargetZoneIngressTLS
          ContainerPort: 10001
          ContainerName: zone-ingress
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Join [":", [!Ref VPCStackName, PublicSubnet]]
          SecurityGroups:
            - !Ref ZISecurityGroup
            - Fn::ImportValue:
                !Join [":", [!Ref VPCStackName, FargateContainerSecurityGroup]]

  ZITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: zone-ingress
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref ZITaskRole
      ExecutionRoleArn: !Ref ZITaskExecutionRole
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: zone-ingress
          Essential: true
          Image: !Ref Image
          PortMappings:
            - ContainerPort: 10001
              Protocol: tcp
          User: root:root
          Secrets:
            - Name: KUMA_CONTROL_PLANE_CA_CERT
              ValueFrom:
                Fn::ImportValue: !Join [":", [!Ref CPStackName, CPCASecret]]
          Environment:
            - Name: KUMA_DATAPLANE_RUNTIME_RESOURCE
              Value: !FindInMap [Config, ZoneIngress, Template]
          EntryPoint: ["sh", "-c"]
          Command:
            - !Join
              - " "
              - - kuma-dp
                - run
                - --proxy-type 
                - ingress
                - --cp-address
                - Fn::Sub:
                    - https://${Hostname}:5678
                    - Hostname:
                        Fn::ImportValue:
                          !Join [":", [!Ref CPStackName, CPAddress]]
                - --dataplane-var
                - address=`hostname -i`
                - --dataplane-var
                - Fn::Sub:
                    - advertisedAddress=${AdvertisedAddress}
                    - AdvertisedAddress:
                        Fn::ImportValue:
                          !Join [":", [!Ref VPCStackName, ExternalIngressAddress]]
                - --auth-type=aws
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kuma-zone-ingress