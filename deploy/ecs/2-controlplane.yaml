AWSTemplateFormatVersion: "2010-09-09"
Description: Kong Mesh Control Plane on ECS
Parameters:
  VPCStackName:
    Type: String
    Description:
      Name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  Image:
    Type: String
    Default: "docker.io/kong/kuma-cp:2.9.0"
    Description: Name of the control plane docker image
  ZoneName:
    Type: String
    Default: "ecs-test-zone"
    Description: Name of the zone control plane setup in Konnect
  AllowedCidr:
    Type: String
    Default: "10.0.0.0/8"
    Description: CIDR used to restrict control plane access
  DesiredCount:
    Type: Number
    Default: 1
    Description: Number of CP tasks to run
  KonnectSPAT:
    Type: String
    Description: Token zone generated by Konnect when you create a zone in Konnect
    Default: spat_luBFe3qooWdsq0ev1lZeYY3QYt45NJFROKhY0wRudxPwt8KGL
  KonnectCPID:
    Type: String
    Description: Controlplane ID that is shared when you create zone in Konnect
    Default: 128b1dd0-31dc-43e0-a7de-5764d87ebcf5
  ServerCertSecret:
    Type: String
    Description: ARN of an AWS secret containing a TLS certificate for serving control plane traffic
  ServerKeySecret:
    Type: String
    Description: ARN of an AWS secret containing a TLS private key for serving control plane traffic

Resources:
  # We use ECS service discovery to let the mesh data plane proxies
  # communicate with the control plane
  DiscoveryServiceCP:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for Kong Mesh CP
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: controlplane
      NamespaceId:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, PrivateNamespace]]

  # Our NLB exposes the Kuma API on port 5682
  LoadBalancerTargetAPITLS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port: 5682
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, VPCId]]

  LoadBalancerListenerAPITLS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, LoadBalancer]]
      Port: 5682
      Protocol: TCP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref LoadBalancerTargetAPITLS

  # The control plane task populates this secret with the admin token
  APITokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        !Join [
          "/",
          [
            !Ref AWS::StackName,
            "APITokenSecret",
            !Select [2, !Split ["/", !Ref AWS::StackId]],
          ],
        ]
      Description: Secret containing an admin Kuma API Token

  # IAM roles for the control plane task
  CPTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: get-secrets
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref ServerCertSecret
                  - !Ref ServerKeySecret
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  CPTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: put-api-token-secret
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:PutSecretValue
                Resource:
                  - !Ref APITokenSecret
        - PolicyName: get-dataplane-roles
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource:
                  - "*"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess

  # CP security group configuration
  CPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Kong Mesh CP
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, VPCId]]

  CPIngressTCPFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress for control plane TCP from VPC
      GroupId: !Ref CPSecurityGroup
      CidrIp: "10.0.0.0/8"
      IpProtocol: tcp
      FromPort: 5676
      ToPort: 5682

  # ECS configuration
  CPLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  CPService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster:
        Fn::ImportValue: !Join [":", [!Ref VPCStackName, ClusterName]]
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref CPTaskDefinition
      # Our Dataplane proxies reach the control plane through this service
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryServiceCP.Arn
          Port: 5678
      # We can reach the control plane API via the NLB
      LoadBalancers:
        - TargetGroupArn: !Ref LoadBalancerTargetAPITLS
          ContainerPort: 5682
          ContainerName: controlplane
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Join [":", [!Ref VPCStackName, PublicSubnet]]
          SecurityGroups:
            - !Ref CPSecurityGroup
            - Fn::ImportValue:
                !Join [":", [!Ref VPCStackName, FargateContainerSecurityGroup]]

  CPTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kong-mesh-cp-family
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref CPTaskRole
      ExecutionRoleArn: !Ref CPTaskExecutionRole
      Cpu: 256
      Memory: 512
      Volumes:
        - Name: token
      ContainerDefinitions:
        - Name: controlplane
          Essential: true
          Image: !Ref Image
          PortMappings:
            - ContainerPort: 5676
              Protocol: tcp
            - ContainerPort: 5678
              Protocol: tcp
            - ContainerPort: 5682
              Protocol: tcp
          User: root:root # needed for UDP port 53 binding
          Environment:
            - Name: KUMA_MODE
              Value: zone
            - Name: KUMA_ENVIRONMENT
              Value: universal
            - Name: KUMA_MULTIZONE_ZONE_NAME
              Value: !Ref ZoneName
            - Name: KUMA_GENERAL_TLS_CERT_FILE
              Value: /tmp/crt.pem
            - Name: KUMA_GENERAL_TLS_KEY_FILE
              Value: /tmp/key.pem
            - Name: KUMA_DP_SERVER_AUTHN_DP_PROXY_TYPE
              Value: aws-iam
            - Name: KUMA_DP_SERVER_AUTHN_ZONE_PROXY_TYPE
              Value: aws-iam
            - Name: KUMA_DP_SERVER_AUTHN_ENABLE_RELOADABLE_TOKENS
              Value: "true"
            - Name: KMESH_AWSIAM_AUTHORIZEDACCOUNTIDS
              Value: !Ref AWS::AccountId
            - Name: KMESH_MULTIZONE_ZONE_KDS_AUTH_CP_TOKEN_INLINE
              Value: !Ref KonnectSPAT
            - Name: KMESH_MULTIZONE_ZONE_KONNECT_CP_ID
              Value: !Ref KonnectCPID  
            - Name: KUMA_MULTIZONE_ZONE_GLOBAL_ADDRESS
              Value: "grpcs://us.mesh.sync.konghq.com:443"
            - Name: KUMA_EXPERIMENTAL_KDS_DELTA_ENABLED
              Value: "true"
          Secrets:
            - Name: TLS_CRT
              ValueFrom: !Ref ServerCertSecret
            - Name: TLS_KEY
              ValueFrom: !Ref ServerKeySecret
          EntryPoint:
            - sh
            - -c
            - echo "${TLS_CRT}" > "${KUMA_GENERAL_TLS_CERT_FILE}" && echo "${TLS_KEY}" > "${KUMA_GENERAL_TLS_KEY_FILE}"; kuma-cp run
          HealthCheck:
            Command:
              [
                CMD, "/busybox/busybox", "sh", "-c",
                "wget -q -O - http://localhost:5680/healthy || exit 1",
              ]
            StartPeriod: 10
            Interval: 10
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CPLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: controlplane
Outputs:
  CPAddress:
    Description: Address of the control plane
    Value:
      Fn::Sub:
        - ${DiscoveryServiceCP.Name}.${TLD}
        - TLD:
            Fn::ImportValue: !Join [":", [!Ref VPCStackName, TLD]]
    Export:
      Name: !Join [":", [!Ref AWS::StackName, CPAddress]]
  CPCASecret:
    Description: ARN of an AWS secret containing a TLS CA for verifying control plane traffic
    Value: !Ref ServerCertSecret
    Export:
      Name: !Join [":", [!Ref AWS::StackName, CPCASecret]]